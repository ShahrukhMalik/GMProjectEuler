//
//  ProjectEulerProblemsManager.swift
//  GMProjectEuler
//
//  Created by Mustafa on 16/01/2015.
//  Copyright (c) 2015 Learning. All rights reserved.
//

import Foundation

class ProjectEulerProblemsManager {
    
    // MARK: - Singleton
    
    struct Static {
        static var onceToken : dispatch_once_t = 0
        static var instance : ProjectEulerProblemsManager? = nil
    }

    class var sharedManager : ProjectEulerProblemsManager {
        
        dispatch_once(&Static.onceToken) {
            Static.instance = ProjectEulerProblemsManager()
        }
        
        return Static.instance!
    }
    
    // MARK: - Initialization
    
    var problems:[Problem] = []
    
    init () {
        loadProblems();
    }
    
    func loadProblems() {
        let filePathFromBundle = NSBundle.mainBundle().pathForResource("ProjectEulerProblems", ofType:"plist")
        println("Bundle Path: \(filePathFromBundle)")
        
        let filePath = "~/ProjectEulerProblems.plist".stringByExpandingTildeInPath
        println("File Path: \(filePath)")
        
        let manager = NSFileManager.defaultManager()
        
        if (manager.fileExistsAtPath(filePathFromBundle!)) {
            let plistArray = NSArray(contentsOfFile: filePathFromBundle!)

            // Developer's Note: We want to work with swift's array and dictionary objects instead of foundation array and dictionary i.e. NSArray and NSDictionary
            // So we're type casting foundation array to swift array and working with those.
            let swiftArray = plistArray as [NSDictionary]
            var objectsArray:[Problem] = []

            for swiftDictionary in swiftArray {
                var number: String = swiftDictionary["number"] as String
                var title: String = swiftDictionary["title"] as String
                var detail: String = swiftDictionary["detail"] as String
                var reference: String = swiftDictionary["reference"] as String
                var status: String = swiftDictionary["status"] as String
                
                var aProblem: Problem = Problem(n: number.toInt()!, t: title, d: detail, r: reference, s: status)
                objectsArray.append(aProblem)
            }
            
            println("Imported problems:\n\(objectsArray)")
            self.problems = objectsArray

        } else {
            println("File doesn't exist at the specified path: \(filePath)")
        }
    }
    
    // MARK: - Public methods
    
    func solveProblem(problem: Problem) -> String {
        var result: String?
        
        switch (problem.number) {
        case 1:
            result = solveProblem001() // Solved!
        case 2:
            result = solveProblem002() // Solved!
        case 3:
            result = solveProblem003()
        case 4:
            result = solveProblem004()
        case 5:
            result = solveProblem005()
        case 6:
            result = solveProblem006()
        case 7:
            result = solveProblem007()
        case 8:
            result = solveProblem008()
        case 9:
            result = solveProblem009()
        case 10:
            result = solveProblem010()
        default:
            result = ""
        }
        
        return result!
    }
    
    func solveProblem001() -> String {
        // Multiples of 3 and 5
        // If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        // Find the sum of all the multiples of 3 or 5 below 1000.
        var sum: Int = 0
        
        for naturalNumber in 0..<1000 {
            
            if (naturalNumber % 3 == 0) || (naturalNumber % 5 == 0) {
                sum += naturalNumber
            }
        }

        // Formatted sum (number style)
        let numberFormatter = NSNumberFormatter()
        numberFormatter.numberStyle = NSNumberFormatterStyle.DecimalStyle
        numberFormatter.maximumFractionDigits = 0
        
        let formattedResult = numberFormatter.stringFromNumber(sum)!
        var result = "The sum of all the multiples of 3 or 5, below 1000 is:\n\n\(formattedResult)"
        
        return result
    }

    func solveProblem002() -> String {
        // Even Fibonacci numbers
        // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        var fibonnaciSequence: [Int32] = []
        
        var secondLastFibbonacciNumber: Int32 = 1
        var lastFibbonacciNumber: Int32 = 2
        var fibbonacciNumber: Int32 = 0
        
        var sum: Int32 = 0 + lastFibbonacciNumber
        var limit: Int32 = 100// 4000000
        
        fibonnaciSequence.append(secondLastFibbonacciNumber)
        fibonnaciSequence.append(lastFibbonacciNumber)
        
        while (fibbonacciNumber < limit) {
            fibbonacciNumber = secondLastFibbonacciNumber + lastFibbonacciNumber
            secondLastFibbonacciNumber = lastFibbonacciNumber
            lastFibbonacciNumber = fibbonacciNumber
            
            if (fibbonacciNumber < limit) {
                fibonnaciSequence.append(fibbonacciNumber)

                if (fibbonacciNumber % 2 == 0) {
                    sum += fibbonacciNumber
                }
            }
        }
        
        // Printing sequence
        println("Fibbonnaci Sequence:")
        var index: Int = 0
        var total: Int = fibonnaciSequence.count
        
        for index = 0; index < total; index++ {
            print("\(fibonnaciSequence[index])")
            
            if (index != fibonnaciSequence.count - 1) {
                print(",")
            }
        }
        
        // Formatted sum (number style)
        let numberFormatter = NSNumberFormatter()
        numberFormatter.numberStyle = NSNumberFormatterStyle.DecimalStyle
        numberFormatter.maximumFractionDigits = 0
        
        let formattedResult = numberFormatter.stringFromNumber(NSNumber(int: sum))!
        var result = "The sum of the even-valued Fibonacci terms is:\n\n\(formattedResult)"
        
        return result
    }

    func solveProblem003() -> String {
        // Largest prime factor
        // The prime factors of 13195 are 5, 7, 13 and 29.
        // What is the largest prime factor of the number 600851475143?

        return "[Implementation Pending]"
    }

    func solveProblem004() -> String {
        return "[Implementation Pending]"
    }

    func solveProblem005() -> String {
        return "[Implementation Pending]"
    }

    func solveProblem006() -> String {
        return "[Implementation Pending]"
    }

    func solveProblem007() -> String {
        return "[Implementation Pending]"
    }

    func solveProblem008() -> String {
        return "[Implementation Pending]"
    }

    func solveProblem009() -> String {
        return "[Implementation Pending]"
    }

    func solveProblem010() -> String {
        return "[Implementation Pending]"
    }
}
